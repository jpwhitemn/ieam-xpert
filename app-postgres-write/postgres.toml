#
# Copyright (C) 2022 IOTech Ltd
#

[Writable]
  LogLevel = "DEBUG"

  [Writable.StoreAndForward]
    Enabled = false
    RetryInterval = "5m"
    MaxRetryCount = 10

  [Writable.Pipeline]
    ExecutionOrder = "FilterByResourceName, JavascriptTransform, ConvertByteArrayToEvent, PostgresWrite"

    [Writable.Pipeline.Functions.FilterByResourceName]
      [Writable.Pipeline.Functions.FilterByResourceName.Parameters]
      ResourceNames = "frame_id,frame"
      FilterOut = "false"
    [Writable.Pipeline.Functions.JavascriptTransform]
      [Writable.Pipeline.Functions.JavascriptTransform.Parameters]
      # TransformScript defines the transformation logic in the valid javascript syntax
      # add frame_id to event tags
      TransformScript ="""
      var outputObject = inputObject;
      for (i in inputObject.readings) {
        if (inputObject.readings[i].resourceName === "frame_id") {
          outputObject.tags={frame_id: inputObject.readings[i].value};
        } else {
          outputObject.readings=[inputObject.readings[i]];
        }
      }
      return outputObject;
      """
    [Writable.Pipeline.Functions.ConvertByteArrayToEvent]
    [Writable.Pipeline.Functions.PostgresWrite]
      [Writable.Pipeline.Functions.PostgresWrite.Parameters]
      Host = "timescaledb"
      Port = "5432"
      DatabaseName = "edgex"
      TableName = "edgex_readings"
      StoreEventId = "true"
      AuthMode = "usernamepassword"
      ChunkTimeInterval = "7 days"
      SecretPath = "postgres"
      PersistOnError = "false"


# InsecureSecrets are required for Store and Forward DB access and for authenticated export functions
# when not using security services, i.e. Vault
  [Writable.InsecureSecrets]
    [Writable.InsecureSecrets.DB]
    path = "redisdb"
      [Writable.InsecureSecrets.DB.Secrets]
      username = ""
      password = ""
    [Writable.InsecureSecrets.mqtt]
    path = "mqtt-bus"
      [Writable.InsecureSecrets.mqtt.Secrets]
      username = ""
      password = ""
      cacert = ""
      clientcert = ""
      clientkey = ""
    [Writable.InsecureSecrets.postgres]
    path = "postgres"
      [Writable.InsecureSecrets.postgres.Secrets]
      username = "iotechuser"
      password = "p@55w0rd"

[Service]
HealthCheckInterval = "10s"
Host = "localhost"
Port = 59700
ServerBindAddr = "" # if blank, uses default Go behavior https://golang.org/pkg/net/#Listen
StartupMsg = "app-service postgres-write has started"
MaxResultCount = 0 # Not curently used by App Services.
MaxRequestSize = 0 # Not curently used by App Services.
RequestTimeout = "5s"

[Registry]
Host = "localhost"
Port = 8500
Type = "consul"

# Database is require when Store and Forward is enabled
# Note when running in docker from compose file set the following environment variables:
# - Database_Host: edgex-redis
[Database]
Type = "redisdb"
Host = "localhost"
Port = 6379
Timeout = "30s"

# Note Core Metadata is the only required client as it is now used for the version check
# The other clients are only needed if the client interface is being used by one of the configured functions.
[Clients]
  # Used for version check on start-up
  # Also used for DeviceSevice, DeviceProfile and Device clients, which are used by FilterByValueMaxMin function
  [Clients.core-metadata]
  Protocol = "http"
  Host = "localhost"
  Port = 59881

[Trigger]
Type="edgex-messagebus"
  [Trigger.EdgexMessageBus]
  Type = "mqtt"
    [Trigger.EdgexMessageBus.SubscribeHost]
    Host = "localhost"
    Port = 1883
    Protocol = "mqtt"
    SubscribeTopics="edgex/events/#"
    [Trigger.EdgexMessageBus.PublishHost]
    Host = "localhost"
    Port = 1883
    Protocol = "mqtt"
    PublishTopic="example"
    [Trigger.EdgexMessageBus.Optional]
    ClientId ="app-service-postgreswrite"
    Qos            = "0" # Quality of Sevice values are 0 (At most once), 1 (At least once) or 2 (Exactly once)
    KeepAlive      = "10" # Seconds (must be 2 or greater)
    Retained       = "false"
    AutoReconnect  = "true"
    ConnectTimeout = "30" # Seconds
    SkipCertVerify = "false"
    authmode = "none"  # change to "usernamepassword", "clientcert", or "cacert" for secure MQTT messagebus.
    secretname = "mqtt-bus"
